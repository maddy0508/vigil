// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow for reasoning about incident response, 
 * automatically quarantining suspicious processes and isolating compromised files to minimize potential damage from attacks.
 *
 * - incidentResponseReasoning - A function that triggers the incident response reasoning flow.
 * - IncidentResponseReasoningInput - The input type for the incidentResponseReasoning function.
 * - IncidentResponseReasoningOutput - The return type for the incidentResponseReasoning function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const IncidentResponseReasoningInputSchema = z.object({
  incidentData: z.string().describe('Detailed data about the security incident, including logs, process states, and file descriptors.'),
  systemState: z.string().describe('Current state of the system, including running processes, network connections, and resource usage.'),
});
export type IncidentResponseReasoningInput = z.infer<typeof IncidentResponseReasoningInputSchema>;

const IncidentResponseReasoningOutputSchema = z.object({
  actions: z.array(
    z.object({
      actionType: z.enum(['quarantineProcess', 'isolateFile', 'noAction']).describe('Type of action to take: quarantine a process, isolate a file, or take no action.'),
      target: z.string().describe('The process ID or file path to quarantine or isolate.'),
      reason: z.string().describe('The reasoning behind the action taken.'),
    })
  ).describe('A list of actions to take based on the incident analysis.'),
  summary: z.string().describe('A summary of the incident and the recommended actions.'),
});
export type IncidentResponseReasoningOutput = z.infer<typeof IncidentResponseReasoningOutputSchema>;

export async function incidentResponseReasoning(input: IncidentResponseReasoningInput): Promise<IncidentResponseReasoningOutput> {
  return incidentResponseReasoningFlow(input);
}

const prompt = ai.definePrompt({
  name: 'incidentResponseReasoningPrompt',
  input: {schema: IncidentResponseReasoningInputSchema},
  output: {schema: IncidentResponseReasoningOutputSchema},
  prompt: `You are an expert security incident responder. Analyze the provided incident data and system state to determine the best course of action to mitigate the threat.

Incident Data:
{{incidentData}}

System State:
{{systemState}}

Based on your analysis, generate a list of actions to take. Each action should include:
- actionType: quarantineProcess, isolateFile, or noAction
- target: The process ID or file path to quarantine or isolate.
- reason: A detailed explanation of why this action is necessary.

Finally, provide a summary of the incident and the recommended actions.

Ensure your response is well-reasoned and provides a clear justification for each action taken.

Output should be a JSON object with 'actions' and 'summary' fields, according to the schema description. The actionType must be one of 'quarantineProcess', 'isolateFile', or 'noAction'.
`,
});

const incidentResponseReasoningFlow = ai.defineFlow(
  {
    name: 'incidentResponseReasoningFlow',
    inputSchema: IncidentResponseReasoningInputSchema,
    outputSchema: IncidentResponseReasoningOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
