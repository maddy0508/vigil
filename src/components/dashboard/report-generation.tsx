"use client"

import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { FileDown, Loader2 } from "lucide-react"
import { attackerProfileGenerator } from "@/ai/flows/attacker-profile-generator"
import { useState } from "react"
import { useToast } from "@/hooks/use-toast"

export function ReportGeneration() {
  const [incidentId, setIncidentId] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const handleGenerateReport = async () => {
    if (!incidentId) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Please select an incident first.",
      });
      return;
    }
    setIsLoading(true);

    try {
      // In a real app, you'd fetch incident data based on the ID
      const fakeIncidentData = {
        "inc-001": {
          incidentData: "Detected unauthorized access from IP 198.51.100.24, associated with ShadowNet. Process evil.exe was used to exfiltrate data.",
          logs: "auth.log: Failed login for 'admin'. system.log: evil.exe started.",
          descriptors: "ShadowNet Breach",
          systemStates: "High CPU usage, unusual network traffic to 198.51.100.24"
        },
        "inc-002": {
          incidentData: "SQL injection attempt detected on the authentication service.",
          logs: "api.log: ' or 1=1;-- received in username field.",
          descriptors: "SQL Injection",
          systemStates: "Normal"
        },
        "inc-003": {
          incidentData: "Large volume of data transferred to an external drive by user 'j.doe'.",
          logs: "file.log: 5GB copied to /media/usb0.",
          descriptors: "Insider Threat",
          systemStates: "High I/O on primary database."
        },
      };

      const selectedIncident = fakeIncidentData[incidentId as keyof typeof fakeIncidentData];

      const report = await attackerProfileGenerator(selectedIncident);

      // This is a simplified download. A real implementation would generate a PDF.
      const reportContent = `
        # Forensic Report: ${incidentId}
        ## ${selectedIncident.descriptors}

        ## Attacker Profile Summary
        ${report.attackerProfile.summary}

        ### Techniques Observed
        ${report.attackerProfile.techniques.map(t => `- ${t}`).join("\n")}

        ### Potential Motives
        ${report.attackerProfile.motives.map(m => `- ${m}`).join("\n")}

        ---
        Generated by Vigil AI
      `;

      const blob = new Blob([reportContent], { type: 'text/plain;charset=utf-8' });
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.download = `${incidentId}-report.txt`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
       toast({
        title: "Report Generated",
        description: "Your forensic report has been downloaded.",
      });
    } catch (error) {
      console.error("Failed to generate report", error);
       toast({
        variant: "destructive",
        title: "Generation Failed",
        description: "Could not generate the report. Please try again.",
      });
    } finally {
      setIsLoading(false);
    }
  }


  return (
    <div className="space-y-4 max-w-md mx-auto">
      <p className="text-sm text-muted-foreground">
        Generate a detailed forensic report for an incident. The report will include a full attacker profile.
      </p>
      <div>
        <label className="text-xs font-medium text-muted-foreground">Incident</label>
        <Select onValueChange={setIncidentId}>
            <SelectTrigger disabled={isLoading}>
            <SelectValue placeholder="Select an incident..." />
            </SelectTrigger>
            <SelectContent>
            <SelectItem value="inc-001">INC-001: ShadowNet Breach</SelectItem>
            <SelectItem value="inc-002">INC-002: SQL Injection Attempt</SelectItem>
            <SelectItem value="inc-003">INC-003: Insider Data Exfiltration</SelectItem>
            </SelectContent>
        </Select>
      </div>
      <Button className="w-full" onClick={handleGenerateReport} disabled={isLoading || !incidentId}>
        {isLoading ? (
          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
        ) : (
          <FileDown className="mr-2 h-4 w-4" />
        )}
        Generate & Download Report
      </Button>
    </div>
  )
}
